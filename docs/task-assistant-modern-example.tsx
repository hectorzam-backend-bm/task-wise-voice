// Ejemplo de c√≥mo actualizar TaskAssistant.tsx para usar la nueva implementaci√≥n

import { useVoiceProcessing } from '@/hooks/use-voice-processing';

// ... otros imports

export function TaskAssistant() {
  // ... estado existente

  // Reemplazar el handleProcessVoiceCommand existente con este:
  const { processVoiceCommand: processVoice, isStreaming } = useVoiceProcessing(token, {
    useStreaming: true, // Habilitar streaming
    onProgress: (message, isError) => {
      setProgressMessages(prev => [...prev, message]);
      setStatusMessage(message);

      // Actualizar barra de progreso basado en el tipo de mensaje
      if (message.includes("ü§ñ Analizando comando")) {
        setProgressValue(10);
      } else if (message.includes("üìã Campos identificados")) {
        setProgressValue(20);
      } else if (message.includes("üîç Buscando proyecto")) {
        setProgressValue(30);
      } else if (message.includes("‚úÖ Proyecto encontrado")) {
        setProgressValue(40);
      } else if (message.includes("üîç") && message.includes("m√≥dulo")) {
        setProgressValue(50);
      } else if (message.includes("‚úÖ") && message.includes("M√≥dulo seleccionado")) {
        setProgressValue(60);
      } else if (message.includes("üîç") && message.includes("fase")) {
        setProgressValue(65);
      } else if (message.includes("‚úÖ") && message.includes("Fase seleccionada")) {
        setProgressValue(70);
      } else if (message.includes("üîç Buscando usuario")) {
        setProgressValue(80);
      } else if (message.includes("‚úÖ Usuario")) {
        setProgressValue(85);
      } else if (message.includes("üìÖ Preparando")) {
        setProgressValue(90);
      } else if (message.includes("üöÄ Creando tarea")) {
        setProgressValue(95);
      } else if (message.includes("‚úÖ ¬°Tarea") && message.includes("creada con √©xito")) {
        setProgressValue(100);
      }

      if (isError) {
        toast({
          title: "Error en el Proceso",
          description: message,
          variant: "destructive",
        });
      }
    }
  });

  const handleProcessVoiceCommand = useCallback(async (text: string) => {
    if (!token) {
      setStatusMessage("Error: Por favor, inicia sesi√≥n primero.");
      toast({
        title: "Autenticaci√≥n Requerida",
        description: "Debes iniciar sesi√≥n para procesar comandos de voz.",
        variant: "destructive",
      });
      return;
    }

    if (!text) {
      setStatusMessage("No se detect√≥ ning√∫n comando de voz.");
      return;
    }

    // Evitar procesamiento duplicado
    if (isProcessing || processingRef.current) {
      console.log("Ya se est√° procesando un comando, ignorando...");
      return;
    }

    processingRef.current = true;
    setIsProcessing(true);
    setIsLoading(true);
    setProgressMessages([]);
    setProgressValue(0);
    setHasProcessed(true);

    try {
      // Usar el nuevo hook unificado
      const resultMessage = await processVoice(text);

      setStatusMessage(resultMessage);
      setProgressValue(100);

    } catch (error) {
      console.error("Error processing voice command:", error);
      const errorMessage = error instanceof Error ? error.message : "Ocurri√≥ un error desconocido.";
      setStatusMessage(`‚ùå Error: ${errorMessage}`);
      setProgressMessages(prev => [...prev, `‚ùå Error: ${errorMessage}`]);
      setProgressValue(0);
    } finally {
      setIsLoading(false);
      setIsProcessing(false);
      processingRef.current = false;
    }
  }, [token, toast, processVoice, isProcessing]);

  // ... resto del componente sin cambios
}
